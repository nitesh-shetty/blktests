#!/bin/bash
# SPDX-License-Identifier: GPL-3.0+
# Copyright (C) 2023 Nitesh Shetty
#
# Run a single copy offload IO using device copy offload,
# for file backed ns

. tests/nvme/rc

DESCRIPTION="run copy offload (device offload) fio job on NVMeOF file-backed ns"

requires() {
	_nvme_requires
	_have_fio
	_require_nvme_trtype_is_fabrics
}

test() {
	echo "Running ${TEST_NAME}"

	_setup_nvmet

	local port
	local nvmedev
	local file_path
	local file_path="${TMPDIR}/img"
	local subsys_name="blktests-subsystem-1"

	truncate -s 1G "${file_path}"

	_create_nvmet_subsystem "${subsys_name}" "${file_path}" \
		"91fdba0d-f87b-4c25-b80f-db7be1418b9e"
	port="$(_create_nvmet_port "${nvme_trtype}")"
	_add_nvmet_subsys_to_port "${port}" "${subsys_name}"

	_nvme_connect_subsys "${nvme_trtype}" "${subsys_name}"

	nvmedev=$(_find_nvme_dev "${subsys_name}")
	cat "/sys/block/${nvmedev}n1/uuid"
	cat "/sys/block/${nvmedev}n1/wwid"

	if [ -e "/sys/block/${nvmedev}n1/queue/copy_max_hw_bytes" ]; then
		if [[ $(cat "/sys/block/${nvmedev}n1/queue/copy_max_hw_bytes") -gt 0 ]]; then
			_fio_copy_verify_single_io "/dev/${nvmedev}n1" 4096 "nvme/nvme_setup_cmd"
		else
			SKIP_REASONS+=("Device does not support copy offload")
		fi
	else
		SKIP_REASONS+=("Kernel does not support copy offload")
	fi

	_nvme_disconnect_subsys "${subsys_name}"

	_remove_nvmet_subsystem_from_port "${port}" "${subsys_name}"
	_remove_nvmet_subsystem "${subsys_name}"
	_remove_nvmet_port "${port}"

	rm "${file_path}"

	echo "Test complete"
}
